{"ast":null,"code":"import _classCallCheck from \"/Users/toks/dev/testbase/survey-serverless/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/toks/dev/testbase/survey-serverless/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/toks/dev/testbase/survey-serverless/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/toks/dev/testbase/survey-serverless/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/toks/dev/testbase/survey-serverless/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/toks/dev/testbase/survey-serverless/src/components/Survey.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from 'semantic-ui-react';\nimport Question from './Question';\nimport Complete from './Complete';\nvar ONE = 1;\n\nvar Survey =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Survey, _Component);\n\n  function Survey(props) {\n    var _this;\n\n    _classCallCheck(this, Survey);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Survey).call(this, props));\n\n    _this.handleNextClicked = function (e) {\n      var currentQuestionNumber = _this.state.currentQuestionNumber;\n      var numberOfQuestions = _this.state.questions.length;\n\n      if (currentQuestionNumber < numberOfQuestions) {\n        _this.setState(function (state, props) {\n          return {\n            currentQuestionNumber: state.currentQuestionNumber + ONE\n          };\n        });\n      } else if (currentQuestionNumber >= numberOfQuestions) {\n        _this.setState({\n          isSurveyCompleted: true\n        });\n      }\n    };\n\n    _this.handleBackClicked = function (e) {\n      var currentQuestionNumber = _this.state.currentQuestionNumber;\n\n      if (currentQuestionNumber > ONE) {\n        _this.setState(function (state, props) {\n          return {\n            currentQuestionNumber: state.currentQuestionNumber - ONE\n          };\n        });\n      }\n    };\n\n    _this.getQuestions = function () {\n      return [{\n        \"Id\": 1,\n        \"Title\": \"What phone do you use?\",\n        \"Options\": [{\n          \"Title\": \"iPhone\"\n        }, {\n          \"Title\": \"Android\"\n        }, {\n          \"Title\": \"Windows Phone\"\n        }]\n      }, {\n        \"Id\": 2,\n        \"Title\": \"How old are you?\",\n        \"Options\": [{\n          \"Title\": \"18 - 25 years old.\"\n        }, {\n          \"Title\": \"26 - 35 years old.\"\n        }, {\n          \"Title\": \"36 - 70 years old.\"\n        }, {\n          \"Title\": \"Over 70 years old.\"\n        }]\n      }];\n    };\n\n    _this.state = {\n      value: \"\",\n      questions: _this.getQuestions(),\n      currentQuestionNumber: ONE,\n      isSurveyCompleted: false\n    };\n    return _this;\n  }\n\n  _createClass(Survey, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          currentQuestionNumber = _this$state.currentQuestionNumber,\n          questions = _this$state.questions,\n          isSurveyCompleted = _this$state.isSurveyCompleted;\n      return React.createElement(\"div\", {\n        className: \"question-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"style\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"\\n          body > div,\\n          body > div > div,\\n          body > div > div > div.question-form {\\n            height: 100%;\\n          }\\n        \"), React.createElement(Grid, {\n        relaxed: true,\n        columns: 2,\n        textAlign: \"center\",\n        style: {\n          height: '100%'\n        },\n        verticalAlign: \"middle\",\n        padded: \"horizontally\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, !isSurveyCompleted && currentQuestionNumber <= questions.length && React.createElement(Question, {\n        questionNumber: currentQuestionNumber,\n        question: questions[currentQuestionNumber - ONE],\n        totalQuestions: questions.length,\n        handleNextClicked: this.handleNextClicked,\n        handleBackClicked: this.handleBackClicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), isSurveyCompleted === true && React.createElement(Complete, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Survey;\n}(Component);\n\nSurvey.propTypes = {\n  questions: PropTypes.array.isRequired,\n  getQuestion: PropTypes.func.isRequired\n};\nexport default Survey;","map":{"version":3,"sources":["/Users/toks/dev/testbase/survey-serverless/src/components/Survey.js"],"names":["React","Component","PropTypes","Grid","Question","Complete","ONE","Survey","props","handleNextClicked","e","currentQuestionNumber","state","numberOfQuestions","questions","length","setState","isSurveyCompleted","handleBackClicked","getQuestions","value","height","propTypes","array","isRequired","getQuestion","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\nimport { Grid } from 'semantic-ui-react'\nimport Question from './Question'\nimport Complete from './Complete'\n\nconst ONE = 1;\n\nclass Survey extends Component {\n  constructor(props) {\n   super(props);\n\n   this.state = {\n     value: \"\",\n     questions: this.getQuestions(),\n     currentQuestionNumber: ONE,\n     isSurveyCompleted: false\n   };\n }\n\n  handleNextClicked = (e) => {\n    let currentQuestionNumber = this.state.currentQuestionNumber;\n    let numberOfQuestions = this.state.questions.length;\n\n    if (currentQuestionNumber < numberOfQuestions) {\n      this.setState((state, props) => ({\n        currentQuestionNumber: state.currentQuestionNumber + ONE\n      }));\n    } else if (currentQuestionNumber >= numberOfQuestions) {\n      this.setState({\n        isSurveyCompleted: true\n      });\n    }\n  }\n\n  handleBackClicked = (e) => {\n    let currentQuestionNumber = this.state.currentQuestionNumber;\n\n    if (currentQuestionNumber > ONE) {\n      this.setState((state, props) => ({\n        currentQuestionNumber: state.currentQuestionNumber - ONE\n      }));\n    }\n  }\n\n  render() {\n    let { currentQuestionNumber, questions, isSurveyCompleted } = this.state;\n\n    return (\n      <div className=\"question-form\">\n        <style>{`\n          body > div,\n          body > div > div,\n          body > div > div > div.question-form {\n            height: 100%;\n          }\n        `}</style>\n\n        <Grid relaxed columns={2}  textAlign='center' style={{ height: '100%' }} verticalAlign='middle' padded=\"horizontally\">\n          {!isSurveyCompleted && currentQuestionNumber <= questions.length &&\n            <Question\n              questionNumber={currentQuestionNumber}\n              question={questions[currentQuestionNumber - ONE]}\n              totalQuestions={questions.length}\n              handleNextClicked={this.handleNextClicked}\n              handleBackClicked={this.handleBackClicked}\n            />\n          }\n          { isSurveyCompleted === true &&\n            <Complete />\n          }\n\n        </Grid>\n      </div>\n    );\n  }\n\n  getQuestions = () => {\n    return [{\"Id\":1,\"Title\":\"What phone do you use?\",\"Options\":[{\"Title\":\"iPhone\"},{\"Title\":\"Android\"},{\"Title\":\"Windows Phone\"}]},{\"Id\":2,\"Title\":\"How old are you?\",\"Options\":[{\"Title\":\"18 - 25 years old.\"},{\"Title\":\"26 - 35 years old.\"},{\"Title\":\"36 - 70 years old.\"},{\"Title\":\"Over 70 years old.\"}]}];\n  }\n}\n\nSurvey.propTypes = {\n  questions: PropTypes.array.isRequired,\n  getQuestion: PropTypes.func.isRequired\n}\n\nexport default Survey;\n"]},"metadata":{},"sourceType":"module"}