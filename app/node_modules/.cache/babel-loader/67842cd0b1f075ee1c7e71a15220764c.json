{"ast":null,"code":"import axios from 'axios';\nexport var REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nexport var RECEIVE_QUESTIONS = 'RECEIVE_QUESTIONS';\nexport var REQUEST_QUESTION = 'REQUEST_QUESTION';\nexport var RECEIVE_QUESTION = 'RECEIVE_QUESTION';\nexport function getQuestions() {\n  return function (dispatch, getState) {\n    var apiUrl = \"/\";\n    dispatch(requestQuestions());\n    console.log(\"requesting questions...\");\n    return fetch(\"\".concat(apiUrl, \"/mortgages/lender/$\"), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(function (response) {\n      if (response.status >= 400) {\n        throw new Error(\"Bad response from server\");\n      }\n\n      return response.json();\n    }).then(function (json) {\n      return dispatch(recieveQuestions(json));\n    });\n  };\n}\n\nfunction requestQuestions() {\n  return {\n    type: REQUEST_QUESTIONS\n  };\n}\n\nfunction recieveQuestions(json) {\n  return {\n    type: RECEIVE_QUESTIONS,\n    json: json\n  };\n}\n\nexport function getQuestion(id) {\n  return function (dispatch, getState) {\n    var apiUrl = \"/\";\n    dispatch(requestQuestion());\n    console.log(\"requesting questions...\");\n    return fetch(\"\".concat(apiUrl, \"/mortgages/lender/$\"), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(function (response) {\n      if (response.status >= 400) {\n        throw new Error(\"Bad response from server\");\n      }\n\n      return response.json();\n    }).then(function (json) {\n      return dispatch(recieveQuestion(json));\n    });\n  };\n}\n\nfunction requestQuestion() {\n  return {\n    type: REQUEST_QUESTION\n  };\n}\n\nfunction recieveQuestion(json) {\n  return {\n    type: RECEIVE_QUESTION,\n    json: json\n  };\n}","map":{"version":3,"sources":["/Users/toks/dev/testbase/survey-serverless/src/actions/survey.js"],"names":["axios","REQUEST_QUESTIONS","RECEIVE_QUESTIONS","REQUEST_QUESTION","RECEIVE_QUESTION","getQuestions","dispatch","getState","apiUrl","requestQuestions","console","log","fetch","method","headers","then","response","status","Error","json","recieveQuestions","type","getQuestion","id","requestQuestion","recieveQuestion"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,SAASC,YAAT,GAAwB;AAC7B,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7B,QAAMC,MAAM,GAAG,GAAf;AAEAF,IAAAA,QAAQ,CAACG,gBAAgB,EAAjB,CAAR;AAEAC,IAAAA,OAAO,CAACC,GAAR;AACA,WAAOC,KAAK,WACPJ,MADO,0BAEV;AACEK,MAAAA,MAAM,EAAE,KADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAFX,KAFU,CAAL,CAQJC,IARI,CAQC,UAAAC,QAAQ,EAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,cAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,aAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,KAdI,EAeJJ,IAfI,CAeC,UAAAI,IAAI;AAAA,aAAIb,QAAQ,CAACc,gBAAgB,CAACD,IAAD,CAAjB,CAAZ;AAAA,KAfL,CAAP;AAgBD,GAtBD;AAuBD;;AAED,SAASV,gBAAT,GAA4B;AAC1B,SAAO;AACLY,IAAAA,IAAI,EAAEpB;AADD,GAAP;AAGD;;AAED,SAASmB,gBAAT,CAA0BD,IAA1B,EAAgC;AAC9B,SAAO;AACLE,IAAAA,IAAI,EAAEnB,iBADD;AAELiB,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID;;AAED,OAAO,SAASG,WAAT,CAAqBC,EAArB,EAAyB;AAC9B,SAAO,UAACjB,QAAD,EAAWC,QAAX,EAAwB;AAC7B,QAAMC,MAAM,GAAG,GAAf;AAEAF,IAAAA,QAAQ,CAACkB,eAAe,EAAhB,CAAR;AAEAd,IAAAA,OAAO,CAACC,GAAR;AACA,WAAOC,KAAK,WACPJ,MADO,0BAEV;AACEK,MAAAA,MAAM,EAAE,KADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAFX,KAFU,CAAL,CAQJC,IARI,CAQC,UAAAC,QAAQ,EAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,cAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,aAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,KAdI,EAeJJ,IAfI,CAeC,UAAAI,IAAI;AAAA,aAAIb,QAAQ,CAACmB,eAAe,CAACN,IAAD,CAAhB,CAAZ;AAAA,KAfL,CAAP;AAgBD,GAtBD;AAuBD;;AAED,SAASK,eAAT,GAA2B;AACzB,SAAO;AACLH,IAAAA,IAAI,EAAElB;AADD,GAAP;AAGD;;AAED,SAASsB,eAAT,CAAyBN,IAAzB,EAA+B;AAC7B,SAAO;AACLE,IAAAA,IAAI,EAAEjB,gBADD;AAELe,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID","sourcesContent":["import axios from 'axios';\n\nexport const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS'\nexport const RECEIVE_QUESTIONS = 'RECEIVE_QUESTIONS'\n\nexport const REQUEST_QUESTION = 'REQUEST_QUESTION'\nexport const RECEIVE_QUESTION = 'RECEIVE_QUESTION'\n\nexport function getQuestions() {\n  return (dispatch, getState) => {\n    const apiUrl = \"/\";\n\n    dispatch(requestQuestions());\n\n    console.log(`requesting questions...`);\n    return fetch(\n      `${apiUrl}/mortgages/lender/$`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        }\n      })\n      .then(response => {\n        if (response.status >= 400) {\n          throw new Error(\"Bad response from server\");\n        }\n\n        return response.json();\n      })\n      .then(json => dispatch(recieveQuestions(json)))\n  }\n}\n\nfunction requestQuestions() {\n  return {\n    type: REQUEST_QUESTIONS\n  }\n}\n\nfunction recieveQuestions(json) {\n  return {\n    type: RECEIVE_QUESTIONS,\n    json\n  }\n}\n\nexport function getQuestion(id) {\n  return (dispatch, getState) => {\n    const apiUrl = \"/\";\n\n    dispatch(requestQuestion());\n\n    console.log(`requesting questions...`);\n    return fetch(\n      `${apiUrl}/mortgages/lender/$`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        }\n      })\n      .then(response => {\n        if (response.status >= 400) {\n          throw new Error(\"Bad response from server\");\n        }\n\n        return response.json();\n      })\n      .then(json => dispatch(recieveQuestion(json)))\n  }\n}\n\nfunction requestQuestion() {\n  return {\n    type: REQUEST_QUESTION\n  }\n}\n\nfunction recieveQuestion(json) {\n  return {\n    type: RECEIVE_QUESTION,\n    json\n  }\n}\n"]},"metadata":{},"sourceType":"module"}